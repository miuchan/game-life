//! GBAÊºîÁ§∫Á®ãÂ∫è
//! 
//! Ëøô‰∏™Á®ãÂ∫èÂ±ïÁ§∫‰∫ÜGBAÊ®°ÊãüÂô®ÁöÑÂäüËÉΩÔºå
//! ÂåÖÊã¨CPUÊâßË°å„ÄÅÂõæÂΩ¢Ê∏≤ÊüìÁ≠â

use gameboy_emulator::gba::{GBASystem, GBAState};
use std::time::Instant;

fn main() -> Result<(), String> {
    println!("üéÆ GBAÊ®°ÊãüÂô®ÊºîÁ§∫");
    println!("=====================================");
    println!("üéØ Â±ïÁ§∫Game Boy AdvanceÊ®°ÊãüÂô®ÂäüËÉΩ");

    // ÂàõÂª∫GBAÊ®°ÊãüÂô®ÂÆû‰æã
    let mut gba = GBASystem::new();
    
    // ÂàõÂª∫ÁÆÄÂçïÁöÑGBA ROMÊï∞ÊçÆ
    let rom_data = create_gba_demo_rom();
    
    // Âä†ËΩΩROM
    gba.load_rom(rom_data)?;
    
    // ÂêØÂä®Ê®°ÊãüÂô®
    gba.start()?;
    
    println!("üöÄ ÂºÄÂßãGBAÊ®°ÊãüÂô®ÊºîÁ§∫...");
    println!();
    
    // ÊòæÁ§∫ÂàùÂßãÁä∂ÊÄÅ
    println!("{}", gba.get_debug_info());
    println!();
    
    // ÊÄßËÉΩËÆ°Êó∂
    let start_time = Instant::now();
    let mut step_count = 0;
    
    // ËøêË°åÊºîÁ§∫Âæ™ÁéØ
    for frame in 0..100 {
        match gba.run_frame() {
            Ok(()) => {
                step_count += 1;
                
                if frame % 10 == 0 {
                    println!("üéÆ Á¨¨{}Â∏ß: PC=0x{:08X}", 
                        frame + 1, 
                        gba.get_cpu_state().get_pc()
                    );
                    
                    let cpu_state = gba.get_cpu_state();
                    let stats = gba.get_stats();
                    
                    println!("   üíª CPUÁä∂ÊÄÅ: Thumb={}, Âë®Êúü={}, Êåá‰ª§={}", 
                        cpu_state.thumb_mode,
                        cpu_state.get_stats().cycles,
                        cpu_state.get_stats().instructions
                    );
                    
                    println!("   üé® GPUÁä∂ÊÄÅ: Â∏ßÊï∞={}, ÂÉèÁ¥†={}, Êâ´ÊèèÁ∫ø={}", 
                        gba.get_gpu_state().frame_count,
                        gba.get_gpu_state().get_stats().pixels_drawn,
                        gba.get_gpu_state().current_scanline
                    );
                    
                    println!("   üìä ÊÄßËÉΩÁªüËÆ°: FPS={:.2}, CPU‰ΩøÁî®Áéá={:.2}%", 
                        stats.fps,
                        stats.cpu_usage * 100.0
                    );
                    
                    if frame % 30 == 0 {
                        println!("{}", gba.get_debug_info());
                        println!();
                    }
                }
            }
            Err(e) => {
                println!("‚ùå GBAÊ®°ÊãüÂô®ÈîôËØØ: {}", e);
                break;
            }
        }
    }
    
    // ËÆ°ÁÆóÊÄßËÉΩÁªüËÆ°
    let elapsed_time = start_time.elapsed();
    
    // ÊòæÁ§∫ÊúÄÁªàÁªüËÆ°
    println!();
    println!("üéâ GBAÊ®°ÊãüÂô®ÊºîÁ§∫ÂÆåÊàêÔºÅ");
    println!("üìä ÊºîÁ§∫ÁªüËÆ°:");
    println!("   ‚è±Ô∏è  ÊÄªÊâßË°åÊó∂Èó¥: {:.2}ms", elapsed_time.as_millis());
    println!("   üîÑ ÊÄªÂë®ÊúüÊï∞: {}", gba.get_cpu_state().get_stats().cycles);
    println!("   üìù ÊÄªÊåá‰ª§Êï∞: {}", gba.get_cpu_state().get_stats().instructions);
    println!("   üé® ÊÄªÂ∏ßÊï∞: {}", gba.get_gpu_state().get_stats().frames_rendered);
    println!("   üñºÔ∏è  ÊÄªÂÉèÁ¥†Êï∞: {}", gba.get_gpu_state().get_stats().pixels_drawn);
    println!("   ‚ö° Âπ≥ÂùáFPS: {:.2}", gba.get_stats().fps);
    println!("   üíª CPU‰ΩøÁî®Áéá: {:.2}%", gba.get_stats().cpu_usage * 100.0);
    println!("   üéÆ ÊºîÁ§∫Ê≠•Êï∞: {}", step_count);
    
    // ÊòæÁ§∫GBAÂàÜÊûê
    println!();
    println!("üéÆ GBAÂàÜÊûê:");
    let cpu_stats = gba.get_cpu_state().get_stats();
    let gpu_stats = gba.get_gpu_state().get_stats();
    let memory_stats = gba.get_memory_state().get_stats();
    
    println!("   üîç CPUÁ±ªÂûã: ARM7TDMI");
    println!("   üì± ÊòæÁ§∫Ê®°Âºè: {:?}", gba.get_gpu_state().get_display_mode());
    println!("   üé® ËÉåÊôØÂ±Ç: {}/4", 
        (0..4).filter(|&i| gba.get_gpu_state().is_background_enabled(i)).count()
    );
    println!("   üñºÔ∏è  Á≤æÁÅµÊï∞Èáè: 128");
    println!("   üé® Ë∞ÉËâ≤Êùø: 512È¢úËâ≤");
    println!("   üíæ ÂÜÖÂ≠òËØªÂèñ: {}", memory_stats.reads);
    println!("   üíæ ÂÜÖÂ≠òÂÜôÂÖ•: {}", memory_stats.writes);
    println!("   üîÑ ARMÊåá‰ª§: {}", cpu_stats.arm_instructions);
    println!("   üîÑ ThumbÊåá‰ª§: {}", cpu_stats.thumb_instructions);
    println!("   üéØ ÊúÄÁªàPC: 0x{:08X}", gba.get_cpu_state().get_pc());
    
    println!("{}", gba.get_debug_info());
    
    Ok(())
}

/// ÂàõÂª∫GBAÊºîÁ§∫ROM
fn create_gba_demo_rom() -> Vec<u8> {
    let mut rom = vec![0u8; 0x200]; // 512Â≠óËäÇÁöÑÊúÄÂ∞èROM
    
    // NintendoÊ†áÂøó (0x04-0xA0)
    let nintendo_logo = [
        0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x8A, 0x84, 0x24, 0x04, 0x51,
        0x11, 0x40, 0x9C, 0x00, 0x21, 0x13, 0x82, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    
    for (i, &byte) in nintendo_logo.iter().enumerate() {
        rom[0x04 + i] = byte;
    }
    
    // Ê∏∏ÊàèÊ†áÈ¢ò (0xA0-0xAC)
    let title = b"GBA DEMO ROM";
    for (i, &byte) in title.iter().enumerate() {
        rom[0xA0 + i] = byte;
    }
    
    // Ê∏∏Êàè‰ª£Á†Å (0xAC-0xB0)
    rom[0xAC] = b'G';
    rom[0xAD] = b'B';
    rom[0xAE] = b'A';
    rom[0xAF] = b'D';
    
    // Âà∂ÈÄ†ÂïÜ‰ª£Á†Å (0xB0-0xB2)
    rom[0xB0] = 0x00;
    rom[0xB1] = 0x00;
    
    // Âõ∫ÂÆöÂÄº (0xB2)
    rom[0xB2] = 0x96;
    
    // ‰∏ªÂçïÂÖÉ‰ª£Á†Å (0xB3)
    rom[0xB3] = 0x00;
    
    // ËÆæÂ§áÁ±ªÂûã (0xB4)
    rom[0xB4] = 0x00;
    
    // ‰øùÁïôÂå∫Âüü (0xB5-0xBC)
    for i in 0xB5..=0xBC {
        rom[i] = 0x00;
    }
    
    // ËΩØ‰ª∂ÁâàÊú¨ (0xBC)
    rom[0xBC] = 0x00;
    
    // Ê†°È™åÂíå (0xBD)
    rom[0xBD] = 0x00;
    
    // ‰øùÁïôÂå∫Âüü (0xBE-0xBF)
    rom[0xBE] = 0x00;
    rom[0xBF] = 0x00;
    
    // Á®ãÂ∫è‰ª£Á†ÅÂå∫Âüü (0x100ÂºÄÂßã)
    // ÁÆÄÂçïÁöÑARMÊåá‰ª§Â∫èÂàó
    let program = create_gba_program();
    for (i, &byte) in program.iter().enumerate() {
        if 0x100 + i < rom.len() {
            rom[0x100 + i] = byte;
        }
    }
    
    rom
}

/// ÂàõÂª∫GBAÁ®ãÂ∫è‰ª£Á†Å
fn create_gba_program() -> Vec<u8> {
    vec![
        // ARMÊåá‰ª§Â∫èÂàó
        // MOV R0, #0x100
        0x00, 0x00, 0xA0, 0xE3,
        
        // MOV R1, #0x200
        0x00, 0x01, 0xA0, 0xE3,
        
        // ADD R2, R0, R1
        0x01, 0x20, 0x80, 0xE0,
        
        // MOV R3, #0x300
        0x00, 0x03, 0xA0, 0xE3,
        
        // SUB R4, R2, R3
        0x03, 0x40, 0x82, 0xE0,
        
        // MOV R5, #0x400
        0x00, 0x05, 0xA0, 0xE3,
        
        // AND R6, R4, R5
        0x05, 0x60, 0x84, 0xE0,
        
        // ORR R7, R6, R0
        0x00, 0x70, 0x86, 0xE1,
        
        // EOR R8, R7, R1
        0x01, 0x80, 0x87, 0xE0,
        
        // MOV R9, #0x500
        0x00, 0x09, 0xA0, 0xE3,
        
        // ADD R10, R8, R9
        0x09, 0xA0, 0x88, 0xE0,
        
        // MOV R11, #0x600
        0x00, 0x0B, 0xA0, 0xE3,
        
        // SUB R12, R10, R11
        0x0B, 0xC0, 0x8A, 0xE0,
        
        // MOV R13, #0x700
        0x00, 0x0D, 0xA0, 0xE3,
        
        // ADD R14, R12, R13
        0x0D, 0xE0, 0x8C, 0xE0,
        
        // MOV R15, #0x800
        0x00, 0x0F, 0xA0, 0xE3,
        
        // Ë∑≥ËΩ¨ÂõûÂºÄÂßã
        0x00, 0x00, 0x00, 0xEA,
    ]
}
