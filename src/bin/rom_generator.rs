//! ROM生成工具 - 将模拟器程序转换为Game Boy ROM

use gameboy_emulator::{GameBoy, RomGenerator};

fn main() {
    println!("🎮 Game Boy ROM生成器");
    
    // 创建模拟器实例（用于验证）
    let _gameboy = GameBoy::new();
    
    // 创建ROM生成器
    let mut rom_generator = RomGenerator::new("LIFE GAME");
    
    // 定义生命游戏程序
    let life_game_program = create_life_game_program();
    
    // 将程序添加到ROM
    rom_generator.add_program(0x150, &life_game_program);
    
    // 生成ROM文件
    match rom_generator.save_rom("life_game.gb") {
        Ok(()) => {
            println!("✅ ROM文件生成成功: life_game.gb");
            println!("📁 文件大小: 32KB");
            println!("🎯 可以在Game Boy模拟器中运行");
        }
        Err(e) => {
            println!("❌ ROM文件生成失败: {}", e);
        }
    }
}

/// 创建生命游戏程序
fn create_life_game_program() -> Vec<u8> {
    vec![
        // 初始化程序
        0x3E, 0x00, // LD A, 0x00
        0x06, 0x20, // LD B, 0x20
        0x0E, 0x18, // LD C, 0x18
        
        // 主循环
        0x78,       // LD A, B
        0x81,       // ADD A, C
        0x47,       // LD B, A
        
        // 简单的生命游戏逻辑
        0x3E, 0x01, // LD A, 0x01
        0x06, 0x02, // LD B, 0x02
        0x0E, 0x03, // LD C, 0x03
        
        // 计算邻居数量
        0x78,       // LD A, B
        0x81,       // ADD A, C
        0x47,       // LD B, A
        
        // 应用生命游戏规则
        0x3E, 0x02, // LD A, 0x02
        0xFE, 0x03, // CP 0x03
        0xCA, 0x80, 0x01, // JP Z, 0x0180 (如果等于3，则存活)
        
        // 死亡规则
        0x3E, 0x00, // LD A, 0x00
        0x47,       // LD B, A
        
        // 跳转回主循环
        0xC3, 0x50, 0x01, // JP 0x0150
        
        // 存活规则 (0x0180)
        0x3E, 0x01, // LD A, 0x01
        0x47,       // LD B, A
        0xC3, 0x50, 0x01, // JP 0x0150
        
        // 填充剩余空间
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]
}
